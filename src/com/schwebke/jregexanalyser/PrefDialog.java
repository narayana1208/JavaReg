/*
 * Copyright (c) 2011, Kai Schwebke. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Kai Schwebke (kai@schwebke.com)
 * or visit www.schwebke.com if you need additional information or have any
 * questions.
 */

/*
 * $Id: PrefDialog.java 755 2012-08-14 18:05:54Z kai $
 */

package com.schwebke.jregexanalyser;

import java.awt.Rectangle;
import java.nio.charset.Charset;
import java.util.ArrayList;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

@SuppressWarnings("serial")
public class PrefDialog extends javax.swing.JDialog {

    /** Creates new form prefDialog */
    public PrefDialog(JFrame parent) {
        super(parent, java.awt.Dialog.ModalityType.MODELESS);
        installedLafs = new ArrayList<String>();
        for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            installedLafs.add(info.getName());
        }

        availableCharsets = new ArrayList<String>();
        for (Charset cs : Charset.availableCharsets().values()) {
            availableCharsets.add(cs.name());
        }

        initComponents();

        Rectangle r = getBounds();
        setBounds(150, 150, r.width, r.height);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLafComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jCharsetComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jHistorySize = new javax.swing.JSpinner();
        jAutoMatchingCheckBox = new javax.swing.JCheckBox();
        jWrapTextCheckBox = new javax.swing.JCheckBox();
        jCheckVersionCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jOkButton = new javax.swing.JButton();
        jCancelButton = new javax.swing.JButton();

        setTitle("jRegExAnalyser: Preferences");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/com/schwebke/jregexanalyser/res/IconApp.png")).getImage()));

        jLabel1.setText("Look'n'Feel");

        jLafComboBox.setModel(new DefaultComboBoxModel(installedLafs.toArray()));

        jLabel2.setText("Text Charset");

        jCharsetComboBox.setModel(new DefaultComboBoxModel(availableCharsets.toArray()));

        jLabel3.setText("History Size");

        jHistorySize.setModel(new javax.swing.SpinnerNumberModel(5, 1, 100, 1));

        jAutoMatchingCheckBox.setText("Permanent Matching");

        jWrapTextCheckBox.setText("Wrap Text");

        jCheckVersionCheckBox.setText("Check for new Versions");

        jOkButton.setText("OK");
        jOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOkButtonActionPerformed(evt);
            }
        });

        jCancelButton.setText("Cancel");
        jCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCharsetComboBox, 0, 155, Short.MAX_VALUE)
                            .addComponent(jLafComboBox, 0, 155, Short.MAX_VALUE)
                            .addComponent(jHistorySize, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 106, Short.MAX_VALUE)
                        .addComponent(jOkButton)
                        .addGap(18, 18, 18)
                        .addComponent(jCancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jWrapTextCheckBox)
                            .addComponent(jAutoMatchingCheckBox)
                            .addComponent(jCheckVersionCheckBox))
                        .addGap(0, 81, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLafComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCharsetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jHistorySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jAutoMatchingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jWrapTextCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckVersionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCancelButton)
                    .addComponent(jOkButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jCancelButtonActionPerformed

    private void jOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOkButtonActionPerformed
        storePrefs();
    }//GEN-LAST:event_jOkButtonActionPerformed

    /**
     * show dialogue and display currently active prefs
     */
    public void showPrefs() {
        jLafComboBox.setSelectedItem(Main.getLookAndFeel());
        jCharsetComboBox.setSelectedItem(Main.getCharset());
        jHistorySize.setValue(Main.getHistorySize());
        jAutoMatchingCheckBox.setSelected(Main.getPermanentMatching());
        jWrapTextCheckBox.setSelected(Main.getWrapText());
        jCheckVersionCheckBox.setSelected(Main.getCheckVersion());
        setVisible(true);
    }

    /**
     * hide dialogue and store prefs
     * This equals the "OK" operation. Cancel just hides, without storing.
     */
    public void storePrefs() {
        Main.setLookAndFeel((String)jLafComboBox.getSelectedItem());
        Main.setCharset((String)jCharsetComboBox.getSelectedItem());
        Main.setHistorySize((Integer)jHistorySize.getValue());
        Main.setPermanentMatching(jAutoMatchingCheckBox.isSelected());
        Main.setWrapText(jWrapTextCheckBox.isSelected());
        Main.setCheckVersion(jCheckVersionCheckBox.isSelected());
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAutoMatchingCheckBox;
    private javax.swing.JButton jCancelButton;
    @SuppressWarnings("rawtypes")
	private javax.swing.JComboBox jCharsetComboBox;
    private javax.swing.JCheckBox jCheckVersionCheckBox;
    private javax.swing.JSpinner jHistorySize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    @SuppressWarnings("rawtypes")
	private javax.swing.JComboBox jLafComboBox;
    private javax.swing.JButton jOkButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jWrapTextCheckBox;
    // End of variables declaration//GEN-END:variables

    private ArrayList<String> installedLafs;
    private ArrayList<String> availableCharsets;
}
