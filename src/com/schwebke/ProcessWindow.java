/*
 * Copyright (c) 2011, Kai Schwebke. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Kai Schwebke (kai@schwebke.com)
 * or visit www.schwebke.com if you need additional information or have any
 * questions.
 */

/*
 * $Id: ProcessWindow.java 595 2011-12-27 06:46:29Z kai $
 */

package com.schwebke;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import javax.swing.SwingUtilities;

/**
 *
 * @author kai
 */
@SuppressWarnings("serial")
public class ProcessWindow extends javax.swing.JFrame {

    /** Creates new form ProcessWindow */
    public ProcessWindow(Process _p, String title) {
        initComponents();
        setTitle(title);
        setLocation(200, 150);
        addText("please wait...\n");
        setVisible(true);
        p = _p;
    }

    public void run() {

        final Thread outputDumper = new Thread(new Runnable() {
            public void run() {
                BufferedReader i = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String l;
                try {
                    while ( (l = i.readLine()) != null ) {
                        addText(l+"\n");
                    }
                } catch (Exception e) {
                    addText("Exception: '"+e.getMessage()+"'\n");
                }
            }
        });

        final Thread errorDumper = new Thread(new Runnable() {
            public void run() {
                BufferedReader i = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                String l;
                try {
                    while ( (l = i.readLine()) != null ) {
                        addText(l+"\n");
                    }
                } catch (Exception e) {
                    addText("Exception: '"+e.getMessage()+"'\n");
                }
            }
        });

        processWaiter = new Thread(new Runnable() {
            public void run() {
                try {
                    p.waitFor();
                    outputDumper.join();
                    errorDumper.join();
                    //Thread.sleep(2000);
                } catch (Exception e) {
                    addText("Exception: '"+e.getMessage()+"'\n");
                } finally {
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            setVisible(false);
                            dispose();
                        }
                    });
                }
            }
        });

        outputDumper.start();
        errorDumper.start();
        processWaiter.start();

    }

    public void waitFor() throws InterruptedException {
        if (processWaiter == null) {
            throw new IllegalStateException("waitFor() called prior to run()");
        }
        processWaiter.join();
    }

    public void addText(final String s) {
        SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    jTextArea.append(s);
                    jScrollPane.getVerticalScrollBar().setValue(
                            jScrollPane.getVerticalScrollBar().getMaximum());
                }
            });
    }

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
        jTitleLabel.setText(title);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTitleLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Process");

        jTitleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTitleLabel.setText("External Processing");

        jTextArea.setColumns(20);
        jTextArea.setEditable(false);
        jTextArea.setRows(5);
        jTextArea.setWrapStyleWord(true);
        jScrollPane.setViewportView(jTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jTitleLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JLabel jTitleLabel;
    // End of variables declaration//GEN-END:variables

    private final Process p;
    private Thread processWaiter;
}
